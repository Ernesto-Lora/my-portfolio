<%- include("partials/header.ejs", { articleStyles: true }) %>

<!DOCTYPE html>
<html lang="en">

<div id="container">
    <h1>Real-Time Inventory Tracking for E-Commerce Using Kafka &amp; Databricks</h1>

    <h2>Summary</h2>    
  <p>I worked on a project with an e-commerce company that was having a major issue with overselling, especially during big events like Black Friday. They used batch updates for inventory and were losing hundreds of thousands annually due to order cancellations. I helped them build a real-time inventory tracking system using Kafka and Spark Structured Streaming on Databricks.</p>
  <p>We ingested clickstream events like 'add to cart' and 'purchase' via Kafka, synced with vendor stock updates from APIs, and maintained a live view of inventory using Delta Lake. Spark jobs kept SKU availability up-to-date and ensured only valid orders passed downstream. </p>
  <p>The result was a reduction in overselling from 10% to under 1%. It was a great example of combining streaming with real-world operations to solve a business-critical issue in a short time frame.</p>

  <section class="section">
    <h2>Business Challenge</h2>
    <p>Previously, the e-commerce relied on hourly batch jobs to sync inventory from PostgreSQL to vendor APIs. During high-demand events (e.g., Black Friday), this led to:</p>
    <ul class="highlight">
      <li>~10% overselling rate</li>
      <li>Significant order cancellations, damaging customer trust</li>
    </ul>
    <p>The goal was to design a streaming-based solution that reacts in real time to purchases, cart updates, and vendor stock changes.</p>
  </section>

  <section class="section">
    <h2>Solution Overview</h2>
    <p>We architected and deployed a real-time inventory tracking system leveraging:</p>
    <ul>
      <li><strong>Apache Kafka:</strong> Ingest clickstream &amp; vendor events</li>
      <li><strong>Databricks &amp; Spark Structured Streaming:</strong> Process streams &amp; update state</li>
      <li><strong>Delta Lake:</strong> Unified batch + streaming storage</li>
      <li><strong>PostgreSQL:</strong> Legacy backend for bootstrapping</li>
    </ul>

    <!-- Suggest placing the architecture diagram below -->
    <figure>
      <img class="inline-img" src="/images/real_time_inventory/real_time_inventory.png" alt="Processing Architecture Diagram">
      <figcaption>Processing Architecture: Kafka &amp; Databricks Streaming Pipeline</figcaption>
    </figure>
  </section>

  <section class="section">
    <h2>Data Sources &amp; Schemas</h2>
    <div class="highlight">
      <h3>Clickstream Events (Kafka Topics)</h3>
      <pre><code> {
  "event_type": "add_to_cart",
  "user_id": "12345",
  "product_id": "SKU-9981",
  "timestamp": "2025-03-29T12:01:02Z",
  "quantity": 2
} </code></pre>
    </div>

    <div class="highlight">
      <h3>Inventory DB (PostgreSQL)</h3>
      <pre><code> product_id VARCHAR,
warehouse_id INT,
quantity_available INT,
updated_at TIMESTAMP </code></pre>
    </div>

    <div class="highlight">
      <h3>Vendor Inventory APIs</h3>
      <p>Stock levels pulled every 5 mins and normalized into events via a microservice.</p>
    </div>

  
  </section>

  <section class="section">
    <h2>Implementation Steps</h2>
    <ol>
      <li><strong>Requirements &amp; Architecture Design:</strong> Workshops and sprint planning to define failure points and streaming-first approach.</li>
      <li><strong>Kafka Setup:</strong>
        <ul>
          <li>Defined topics: <code>user_activity</code>, <code>vendor_updates</code>, <code>inventory_changes</code>.</li>
          <li>Configured Debezium CDC for PostgreSQL &amp; REST-to-Kafka microservice.</li>
        </ul>
      </li>
      <li><strong>Spark Streaming &amp; Delta Lake:</strong>
        <ul>
          <li>Real-time inventory decrement on clickstream events.</li>
          <li>Merge logic for vendor API updates every 5 mins.</li>
        </ul>
      </li>
    </ol>
  </section>

  <section class="section">
    <h2>Impact &amp; Results</h2>
    <ul class="highlight">
      <li>Overselling rate reduced from 10% to &lt;1%</li>
      
      <li>Order SLA violations cut by 65%</li>
    </ul>
  </section>

  <p>Thanks for reading! üßë‚Äçüíªüíï</p>
</div>

</html>
